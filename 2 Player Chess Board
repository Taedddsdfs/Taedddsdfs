/*The first square is the square the piece is moving from, and the second square is the square the piece is moving to.

The squares are represented by a letter and a number, where the letter indicates the column (a-h) and the number indicates the row (1-8). 
So, for example, "e2" means the square in the fifth column (counting from left to right) and the second row (counting from bottom to top).

In this case, "e2 e4" would be a move to move a piece from the e2 square to the e4 square, which is a common move for pawn.
It is also possible for other pieces, such as knights, to move to the e4 square, but it would depend on the specific position of the pieces on the board.
Wish I implemented SDL to show the graphics to make it look like a chess game on Mac with no chess AI though.*/


#include <iostream>
#include <string>
#include <random>
#include <tuple>

// Represents a chess board.
class Board {
 public:
  Board() {
    for (int i = 0; i < 8; i++) {
      for (int j = 0; j < 8; j++) {
        if (i == 1) {
          board[i][j] = 'p';
        } else if (i == 6) {
          board[i][j] = 'P';
        } else {
          board[i][j] = ' ';
        }
      }
    }
  }

  // Returns the piece at the given position, or ' ' if the position is empty.
  char GetPiece(int row, int col) const {
    return board[row][col];
  }

  // Makes the given move on the board. Returns true if the move was successful,
  // false otherwise.
  bool MakeMove(int from_row, int from_col, int to_row, int to_col) {
    // Check that the from and to positions are on the board.
    if (from_row < 0 || from_row >= 8 || from_col < 0 || from_col >= 8 ||
        to_row < 0 || to_row >= 8 || to_col < 0 || to_col >= 8) {
      return false;
    }

    // Check that there is a piece at the from position.
    if (board[from_row][from_col] == ' ') {
      return false;
    }

    // Check that the to position is empty or contains an enemy piece.
    char from_piece = board[from_row][from_col];
    char to_piece = board[to_row][to_col];
    if (from_piece == 'P' || from_piece == 'p') {
      // Pawns can only move diagonally if they are capturing an enemy piece.
      if (from_col != to_col && to_piece == ' ') {
        return false;
      }
      // Pawns can only move forward one space at a time.
      if ((from_row == 1 && to_row - from_row != 1) || (from_row == 6 && to_row - from_row != -1)) {
        return false;
      }
    } else {
      // All other pieces can only move to an empty space.
      if (to_piece != ' ') {
        return false;
      }
    }

    // Make the move.
    board[to_row][to_col] = from_piece;
    board[from_row][from_col] = ' ';
    return true;
  }

 private:
  char board[8][8];
};

int ColToInt(char col) {
  if (col >= 'a' && col <= 'h') {
    return col - 'a';
  }
  return -1;
}

// Converts a row number (1-8) to a row index (0-7).
int RowToInt(char row) {
  if (row >= '1' && row <= '8') {
    return row - '1';
  }
  return -1;
}

// Prompts the user for a move and returns the move as a tuple of (from_row, from_col,
// to_row, to_col). Returns (-1, -1, -1, -1) if the user enters 'q' to quit.
std::tuple<int, int, int, int> GetUserMove() {
  while (true) {
    std::cout << "Enter a move (e.g. e2 e4): ";
    std::string line;
    std::getline(std::cin, line);
    if (line == "q") {
      return std::make_tuple(-1, -1, -1, -1);
    }
    if (line.length() != 5) {
      continue;
    }
    int from_col = ColToInt(line[0]);
    int from_row = RowToInt(line[1]);
    int to_col = ColToInt(line[3]);
    int to_row = RowToInt(line[4]);
    if (from_col == -1 || from_row == -1 || to_col == -1 || to_row == -1) {
      continue;
    }
    return std::make_tuple(from_row, from_col, to_row, to_col);
  }
}

int main() {
  Board board;
  while (true) {
    // Print the board.
    for (int i = 0; i < 8; i++) {
      for (int j = 0; j < 8; j++) {
        std::cout << board.GetPiece(i, j) << " ";
      }
      std::cout << std::endl;
    }

    // Get the user's move.
    int from_row, from_col, to_row, to_col;
    std::tie(from_row, from_col, to_row, to_col) = GetUserMove();
    if (from_row == -1) {
      break;
    }

    // Make the move.
    if (!board.MakeMove(from_row, from_col, to_row, to_col)) {
      std::cout << "Invalid move!" << std::endl;
    }
  }

  return 0;
}

